import sys
import os
from datetime import date
from Bio import SeqIO

configfile: "config.yaml"

rule all:
    input:
        expand("output/treeinform/threshold_{threshold}/{species}.collapsed.fasta", 
               threshold=config['thresholds'], 
               species=config['reference']['species'])

rule generate_longest_ORFs:
    message: "Generate open reading frames from reference transcriptome."
    input:
        transcriptome_path = config["reference"]["path"]
    output:
        pep_fasta="output/{species}.pep.fasta"
    params:
        outdir = "output/{species}.transdecoder"
    log:
        "logs/transdecoder_{species}.log"
    shell:
        """
        TransDecoder.LongOrfs -t {input.transcriptome_path} --output_dir {params.outdir} > {log} 2>&1

		transcriptome_base=$(basename {input.transcriptome_path})
        cp {params.outdir}/${{transcriptome_base}}.transdecoder_dir/longest_orfs.pep {output.pep_fasta}
        """

rule run_emapper:
    input:
        pep_fasta="output/{species}.pep.fasta"
    output:
        emapper_out= "output/{species}.emapper.annotations"
    params:
        out_prefix="{species}",
        out_dir="output"
    threads: workflow.cores
    log:
        "logs/run_emapper_{species}.log"
    shell:
        """
        emapper.py -i {input.pep_fasta} -m diamond -o {params.out_prefix} --cpu {threads} --output_dir {params.out_dir} > {log} 2>&1
        """

rule update_fasta_headers:
    input:
        fasta = "output/{species}.pep.fasta",
        emapper = "output/{species}.emapper.annotations"
    output:
        updated_fasta = "resources/sequences/{species}.annotated.pep.fasta"
    run:
        import pandas as pd

        # Function to parse the FASTA file
        def read_fasta(file_path):
            with open(file_path, 'r') as f:
                sequences = {}
                current_seq = ""
                current_header = ""
                for line in f:
                    line = line.strip()
                    if line.startswith(">"):
                        if current_seq:
                            sequences[current_header] = current_seq
                        current_header = line
                        current_seq = ""
                    else:
                        current_seq += line
                if current_seq:
                    sequences[current_header] = current_seq
            return sequences

        # Function to parse the eggNOG mapper output
        def read_emapper(file_path):
            annotations = pd.read_csv(file_path, sep='\t', comment='#', header=None)
            annotations = annotations[[0, 7]]
            annotations.columns = ['id', 'description']
            annotations_dict = annotations.set_index('id').to_dict()['description']
            return annotations_dict

        # Read protein sequences and eggNOG annotations
        sequences = read_fasta(input.fasta)
        annotations = read_emapper(input.emapper)

        # Update FASTA headers
        with open(output.updated_fasta, 'w') as f:
            for header, sequence in sequences.items():
                id = header.split()[0][1:]
                if id in annotations:
                    f.write(header + " " + annotations[id] + "\n")
                else:
                    f.write(header + "\n")
                f.write(sequence + "\n")

rule orthofinder:
    """
    Infer gene trees from set of protein sequences downloaded from public databases.
    """
    input:
        "resources/sequences/{species}.annotated.pep.fasta"
    output:
        directory("output/orthofinder/{species}/Gene_Trees/")
    log:
        "logs/run_orthofinder_{species}.log"
    threads: workflow.cores
    shell:
        """
        mkdir -p output/orthofinder
        rm -rf output/orthofinder/{wildcards.species}
        
        orthofinder -t {threads} -f resources/sequences -o output/orthofinder/{wildcards.species} > {log} 2>&1
        
        # Copy the Gene_Trees to a location that does not depend on the date
        mkdir -p output/orthofinder/{wildcards.species}/Gene_Trees
        cp output/orthofinder/{wildcards.species}/Results_*/Gene_Trees/* output/orthofinder/{wildcards.species}/Gene_Trees/
        """

rule collapse_with_treeinform:
    input:
        gene_trees="output/orthofinder/{species}/Gene_Trees/",
        updated_fasta="resources/sequences/{species}.annotated.pep.fasta"
    output:
        collapsed_proteins="output/treeinform/threshold_{threshold}/{species}.collapsed.fasta"
    params:
        sp="{species}",
        outdir="output/treeinform/threshold_{threshold}/{species}",
        threshold="{threshold}"
    shell:
        """
        mkdir -p {params.outdir}
        python scripts/treeinform_collapse.py -s {input.updated_fasta} -gt {input.gene_trees} -t {params.threshold} -sp {params.sp} -o {params.outdir}
        """

rule busco_scores:
    """
    Assess completeness of collapsed reference transcriptome
    with BUSCO 
    """
    input:
        "output/treeinform/threshold_{threshold}/{species}.collapsed.fasta"
    output:
        directory("output/treeinform/threshold_{threshold}/busco")
    threads: workflow.cores
    params:
        mode="transcriptome",
        lineage="metazoa_odb10",
        filename=expand("{species}.collapsed.fasta.transcripts.fasta", species=config['reference']['species'])
    shell:
        """
		busco -i {input} -o {params.filename} --force --out_path {output} -l {params.lineage} -m {params.mode} --offline --download_path {config.busco} -c {threads}
		"""